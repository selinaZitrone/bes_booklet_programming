### General principles

You don't have to reinvent the wheel to write reproducible, legible, and maintainable code. There are many general and language-specific guidelines and
tips that you can follow and we list the most essential ones below.

Before we dive into the specifics we have a two tips for you:

- **Plan ahead**: Familiarize yourself with good practice rules for your language and start implementing them from the beginning. It's easier than cleaning and restructuring the entire project later.
- **Progress over perfection**: If you are just at the start of your 
journey to good coding practice, don't feel overwhelmed by all the rules and 
conventions. You don't need a perfect workflow and codebase from the beginning.
Start with one guideline and build from there. Writing reproducible and legible code will become a habit over time and you will notice that this does not make coding more burdonsome but actually faster and more fun and rewarding.

### Have a consistent coding style

Consistency improves readability and maintainability. It helps others (and your future self) quickly understand your project's logic and workflows. 

#### Follow a style guide

Every programming language has a style guide for things like
indentation, spacing and naming conventions for variables and functions. Check the style guide for the languages you use [^1] to get an overview of the rules.

The cool thing is, that there are tools to help you enforce a consistent style across a codebase:

- **Formatters**: Can auto-format your script to eliminate inconsistencies.
- **Linters**: Can analyze your code and list areas for improvement.

Using such tools is an easy win to improve your code base and it is very satisfying to
see your whole script automatically transforming into a good practice style.

::: {.callout-tip}

## Using formatters and Linters

Depending on your combination of IDE and programming languages this might be different.
Just search for it online to find the right tools for you.

##### R and RStudio

In RStudio you can auto-format your entire R script from the command pallette. 
Open it using the keyboard shortcut (`Ctrl/Cmd + Shift + P`) and search for
"format" to find all formatting options. With "Reformat Current Document", you can
auto-format your code to comply with a defined coding style. You can also toggle the 
"Reformat documents on save" for even more convenience. In these options, you can also
chose your "Code formatter". By default it applies the tidyverse style guide (option "Styler") which
is already a very good option.
If you installed the `lintr` R package, you can also search for "lint" options in the
command pallette. There you can "Lint current file" or "Lint current package". This
will list all style problems in your code in the console area and mark them with a blue
information icon on the left side of your script. You can then go through these 
points one by one to improve your code.

#### Python and VScode

<!-- todo: this still needs to be written -> but maybe it is anyways already too long and too specific? -->
- VScode also has a command palette that you can open with `Ctrl + Shift + P` on Windows and `XXX` on Mac
- To format your script automatically, you can search for "Format Document" in the command palette
- You can also open the VScode settings and look for the "Format on Save" option that you can toggle to trigger automatic formatting
- In the VScod "Format" settings, you can also select the default formatter to be used

Often, you can also include a custom style file in your projects and tell the formatter to
use the style file. However, this is more advanced.

:::
  
#### Have a naming convention

The goal of a naming convention is to have clear and descriptive names 
that indicate the purpose or content of files, variables, functions, and modules.
To learn about good practice names for you files, please refer to the section on project structure.
In your codebase, use concise and descriptive object names. Variable names are usually nouns and function names verbs. Avoid using names of existing variables or functions.

:::{.callout-note}

## Examples of good and bad object names

**Bad** names do not reveal what is behind the variable/function and could be misleading.

`temp`, `data1`, `data_function`, `my_function`

**Good** names are human readable and tell the user what is behind the objects.

`temperature_readings`, `user_data`, `read_data`, `run_binomial_model`

:::

:::{.callout-tip}

## Capitalization rules

Each language community has a preferred naming style. In Python and R this is for example
`snake_case` while JavaScript uses `lowerCamelCase`.
Checkout the style-guide of your preferred programming language to find out what the 
community uses.
:::

It is good practice to establish and follow a naming convention throughout a project.
This convention can include rules for capitalization (snake_case vs. camelCase) or abbreviations,
but also rules on how you name your functions (e.g. you might want to prefix all your helper functions with `zzz_` to mark them as helper functions).
If you established such a convention once, then you can also apply it to other projects.

### Comment your code

<!-- todo: In the old guide, there is an explanation of what comments are. I think we don't need to do that right? Everyone using code knows this I guess -->

How often have you revisited an old script six months down the line and not been able to figure out what you had been doing? Or have taken on a script from a collaborator and not been able to understand what their code is doing and why? An easy win for making code more readable and reproducible is the liberal, and effective, use of comments. One good principle to adhere to is to comment the ‘why’ rather than the ‘what’. The code itself tells the reader what is being done, it is far more important to document the reasoning
behind a particular section of code. 
You can use inline comments for short explanations or block comments that span 
multiple lines to summarize sections of code or provide detailed explanations.

Don't forget to update your comments as your code evolves to avoid outdated or misleading
information.

### Structure your scripts

In addition to writing legible code, you can structure your scripts in a consistent and
logical way, so that readers can orient themselves easily in your codebase. How
a good script structure looks like depends on the type of script but there are some 
general principles that you can follow. 

One major thing to consider is to split your scripts when they start getting too long.
There is no clear rule on this, but try to make your scripts only do one thing and 
keep in mind that you can split a script into multiple scripts and then load them
into your main script (using `source` in R or `import` in Python).

Within one script, you can consider a standardized header for your scripts explaining the purpose of 
the script, the author and other relevant information. Then use the top section
of your script to load all external libraries and scripts and define global variables
that are used in the script. If you load data, it is usually good practice to load
all data in one block at the top as well. Only when you have done all that, you can
start with the other code that for example modifies the data and produces a figure.

To help guide the reader through your scripts, you can also use section headers 
that can be navigated through the outline of your script in the IDE.

:::{.callout-tip}

## Example structure of R script for data analysis

```r
# Purpose: Analyze climate data
# Author: Jane Doe, John Doe
# Copyright/License: 
# Contact: jane.doe@email.com
# Date: 2025-02-20

# Load libraries -------------------------------------------------------------
library(tidyverse)

# Define global variables ----------------------------------------------------
rain_data_path <- "data/temperature_readings.csv"
temp_data_path <- "data/rainall_readings.csv"

# Load data ------------------------------------------------------------------
temperature_data <- read_csv(temp_data_path)
rainfall_data <- read_csv(rain_data_path)

# Data processing ------------------------------------------------------------

# Analysis -------------------------------------------------------------------

# Output results -------------------------------------------------------------
```

:::

To avoid, having to retype all of this for every script, consider creating a 
template that you can apply and then fill out for new scripts that you create.

<!-- todo: Should we mention R Studio snippets here? Seems too IDE-specific -->


  

[^1]: E.g. see [@PEP8Style] for Python, [@StyleGuideJulia] for Julia and [@TidyverseStyleGuide] for R.