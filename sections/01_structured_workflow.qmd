### General principles

You don't have to reinvent the wheel to write reproducible, legible, and maintainable code. There are many general and language-specific guidelines and
tips that you can follow and we list the most essential ones below.

Before we dive into the specifics we have a two tips for you:

- **Plan ahead**: Familiarize yourself with good practice rules for your language and start implementing them from the beginning. It's easier than cleaning and restructuring the entire project later.
- **Progress over perfection**: If you are just at the start of your 
journey to good coding practice, don't feel overwhelmed by all the rules and 
conventions. You don't need a perfect workflow and codebase from the beginning.
Start with one guideline and build from there. Writing reproducible and legible code will become a habit over time and you will notice that this does not make coding more burdonsome but actually faster and more fun and rewarding.

### Have a consistent coding style

Consistency improves readability and maintainability. It helps others (and your future self) quickly understand your project's logic and workflows. 

#### Follow a style guide

Every programming language has a style guide for things like
indentation, spacing and naming conventions for variables and functions. Check the style guide for the languages you use [^1] to get an overview of the rules.

The cool thing is, that there are tools to help you enforce a consistent style across a codebase:

- **Formatters**: Can auto-format your script to eliminate inconsistencies.
- **Linters**: Can analyze your code and list areas for improvement.

Using such tools is an easy win to improve your code base and it is very satisfying to
see your whole script automatically transforming into a good practice style.

::: {.callout-tip}

## Using formatters and Linters

<!-- todo: Do we really need this? Is it interesting for beginners to know that you can have your own style guide file? -->

Depending on your combination of IDE and programming languages this might be different.
Just search for it online to find the right tools for you. 
Often, you can also include a custom style file in your projects and tell the formatter to
use the style file. However, this is more advanced.

##### R and RStudio

- **Auto-format**: Open the command palette (`Ctrl/Cmd + Shift + P`) and search for "format". Use "Reformat Current Document" to auto-format your code. Toggle "Reformat documents on save" for convenience. You can also chose your own "Code formatter" but the default option "Styler", which applies the tidyverse style guide is already a very good option.
- **Lint**: Install the `lintr` package and search for "lint" options in the command palette. Use "Lint current file" or "Lint current package" to list style problems.

#### Python and VScode

<!-- todo: this still needs to be written -> but maybe it is anyways already too long and too specific? -->
- **Auto-format**: Open the command palette (`Ctrl + Shift + P` on Windows or `Cmd + Shift + P` on Mac) and search for "Format Document". You can also enable "Format on Save" in VS Code settings and
"Select Formatter" a default formatter (e.g., `black`, `autopep8`) in VS Code settings.
- **Lint**: Install a linter like `pylint` or `flake8` and configure it in VS Code settings.

:::
  
#### Have a naming convention

Use clear and descriptive names for files, variables, functions, and modules. 
The goal of a good naming conventions is that it is immediately clear to the reader
what is behind any file or object.
To learn about good practice names for you files, please refer to the section on project structure. For objects in your codebase you can follow these tips:

- **Concise and Descriptive**: Variable names are usually nouns, and function names are verbs.
- **Avoid Conflicts**: Don't use names of existing variables or functions.
- **Use consistent capitalization rules**: Each language community has a preferred naming style (e.g., `snake_case` for Python and R, `lowerCamelCase` for JavaScript). Check your language's style guide.
- **Develop rules and document them**: You can develop your own conventions where it 
  is useful. This can include things like when and how to use abbreviations or rules
  on how you name your functions (e.g. you might want to prefix all your helper functions with `zzz_` to mark them as helper functions). 

:::{.callout-note}

## Examples of good and bad object names

**Bad** names do not reveal what is behind the variable/function and could be misleading.

`temp`, `data1`, `data_function`, `my_function`

**Good** names are human readable and tell the user what is behind the objects.

`temperature_readings`, `user_data`, `read_data`, `run_binomial_model`

:::

It is good practice to establish and follow a naming convention throughout a project.
It also helps a lot to document your conventions and naming logic in the readme file
of your project. This way, it is easier for collaborators to read and understand your 
code but also to contribute using the same style

### Comment your code

<!-- todo: In the old guide, there is an explanation of what comments are. I think we don't need to do that right? Everyone using code knows this I guess -->

<!-- todo: Maybe this section could be much shorter? I copied some of the text from the old booklet which maybe is too verbose? -->

How often have you revisited an old script six months down the line and not been able to figure out what you had been doing? Or have taken on a script from a collaborator and not been able to understand what their code is doing and why? 
An easy win for making code more readable and reproducible is the liberal, and effective, use of comments. One good principle to adhere to is to comment the ‘why’ rather than the ‘what’. The code itself tells the reader what is being done, it is far more important to document the reasoning behind a particular section of code. 

You can use inline comments for short explanations or block comments that span 
multiple lines to summarize sections of code or provide detailed explanations.

Don't forget to update your comments as your code evolves to avoid outdated or misleading information.

### Structure your scripts

In addition to writing legible code, you can structure your scripts in a consistent and
logical way, so that readers can orient themselves easily in your codebase. How
a good script structure looks like depends on the type of script but there are some 
general principles that you can follow.

Here are some things to consider:

- **Split Long Scripts**: Make scripts do just one thing. If needed, you can
  import multiple scripts that you need for your analysis (e.g. using `source` in R or `import` in Python).
- **Standardized Header**: Include essential information like the purpose, authors,
  contact, license, etc.
- **Initialize at the Top**: Load all libraries, define global variables and read
  all data in one block at the top instead of throughout the script.
- **Use Section Headers**: Guide readers through your scripts with section headers.
  In many IDEs, you can navigate these sections using a script outline.
- **Creating a script template**: Create a new script from a pre-structured template
 where you can fill out the relevant information in the header section and the
 top part of your script. In RStudio, you can also checkout code snippets, that allow you to easily load template code and script sections in your scripts [^2].

:::{.callout-tip}

## Example structure of R script for data analysis

```r
# Purpose: Analyze climate data
# Author: Jane Doe, John Doe
# Copyright/License: 
# Contact: jane.doe@email.com
# Date: 2025-02-20

# Load libraries -------------------------------------------------------------
library(tidyverse)

# Define global variables ----------------------------------------------------
rain_data_path <- "data/temperature_readings.csv"
temp_data_path <- "data/rainall_readings.csv"

# Load data ------------------------------------------------------------------
temperature_data <- read_csv(temp_data_path)
rainfall_data <- read_csv(rain_data_path)

# Data processing ------------------------------------------------------------

# Analysis -------------------------------------------------------------------

# Output results -------------------------------------------------------------
```

:::

[^1]: E.g. see [@PEP8Style] for Python, [@StyleGuideJulia] for Julia and [@TidyverseStyleGuide] for R.
[^2] [RStudio Code Snippets](https://support.posit.co/hc/en-us/articles/204463668-Code-Snippets-in-the-RStudio-IDE)