One of the core principles in software development is DRY (*Don't Repeat Yourself*), whereby the aim is to reduce any repetitive patterns or duplicates in your code in favour of creating modular and referenceable code. Although you might be inclined to think that DRY principles are things that software developers should take into consideration, they are still beneficial even for a simple data analysis task. Even when analysing data, we are sometimes performing repetitive tasks, *e.g.,* running the same analysis for different datasets. Although it may seem simpler to just copy and paste the same code over again, it means that every time you need to change something (or fix an error), you need to change it in every place the code has been copied to. Functions are a simple way to avoid this, as they allow you to break your code into modules, which allows you to repeat the same task in a standardised (and documented) manner. A function is a self-contained block of code that performs a *single action*. Although different programming languages will have different ways of writing a function, they all have the same anatomy: input -\> operation -\> output. In addition to allowing you to keep your workflow DRY, functions have the added benefit that, because they are designed to execute a specific task, we are able to make sure that it is performing that specific task and ensure the correctness of our data analysis. See the section on [testing](sections/03_testing_code.qmd) for more information.

### Writing your first function (do's and don'ts)

#### Documentation

When documenting your code, never assume that the reader knows the basics of what is going on; strive to explain things to the layperson. At the highest level, one needs to document how a function works, what it does, and how to use it. However, it is useful to think about creating two 'levels' of documentation. Firstly, documentation that allows developers/collaborators to understand what the code does (this you can do with comments inside the function) as well as creating documentation for those who will use the function and need to know *how* to use it (most programming languages allow you to add a description to functions or variables). Typically function descriptions are 'exported' with a function and act as metadata, and are searchable (e.g., using the help function), comments however are not and someone would have to be looking at the original source code to view them. Additionally, it may also be useful to provide higher-level documentation as to how the different parts (functions) integrate and work together (something that can be done using a README, for example).

#### Keeping things modular

The key to writing effective functions is to keep it simple. A function should perform a single action, not rely on objects from outside the function, and not change objects outside the function. So, if a function gets too big (does too many jobs), split it. This is useful to keep in mind in instances when you have similar analyses that share 90% of the same code. Here, it makes sense to write a function that does the 90% and keep the 10% difference external to the function.

#### Have a consistent naming convention

As discussed in the [previous section](sections/01_structured_workflow.qmd), consistency is key to making your work easier for others to understand and follow. In terms of introducing functions into your workflow, make sure that you are consistent with how you name and describe them. If you use the term `init` in one function, you should use it everywhere; do not use `initialise` or `int` elsewhere. Because functions perform an action on an object, having a combination of `verb` + `object` in the name makes sense. Having a consistent design pattern (terms and word order) makes your code easier to understand and serves as a template for further development.

::: {.callout-tip}
## Example

Let's say I have two functions; one initialises an object as a number and the other as a character. Bad practice would be to name them as follows:

-   `int_char()`
-   `numInit()`

Instead, opt for consistency in both how we choose to represent the 'initialise' action as well as the verb-object order:

-   `init_num()`
-   `init_char()`

Note that there is no right and wrong in terms of the words, order, or case that we use; just make sure that it is consistent and that it is clearly documented.
:::